import boto3
import botocore.exceptions
import botocore.errorfactory

import nixops.util
import nixops.resources
import nixopsaws.ec2_utils
from nixopsaws.resources.ec2_common import EC2CommonState
from nixops.diff import Diff, Handler

class EC2RDSSubnetGroupDefinition(nixops.resources.ResourceDefinition):

    @classmethod
    def get_type(cls):
        return "ec2-rds-subnet-group"

    @classmethod
    def get_resource_type(cls):
        return "rdsSubnetGroups"

    def show_type(self):
        return "{0}".format(self.get_type())

class EC2RDSSubnetGroupState(nixops.resources.DiffEngineResourceState, EC2CommonState):

    state = nixops.util.attr_property("state", nixops.resources.ResourceState.MISSING, int)
    access_key_id = nixops.util.attr_property("accessKeyId", None)
    _reserved_keys = EC2CommonState.COMMON_EC2_RESERVED

    @classmethod
    def get_type(cls):
        return "ec2-rds-subnet-group"

    def __init__(self, depl, name, id):
        nixops.resources.DiffEngineResourceState.__init__(self, depl, name, id)
        self.handle_create_rds_db_subnet = Handler(
            ['groupName', 'region', 'description', 'subnetIds'],
            handle=self.realize_create_subnet)

    def show_type(self):
        s = super(EC2RDSSubnetGroupState, self).show_type()
        return "{0} [{1}]".format(s, self._state.get('region', None))

    @property
    def resource_id(self):
        return self._state.get('groupName', None)

    def _check(self):
        if self._state.get('groupName', None) is None:
            return
        if self.state == self.UP:
            try:
                response = self.get_client("rds").describe_db_subnet_groups(
                        DBSubnetGroupName=self._state.get('groupName', None))
            except botocore.exceptions.ClientError as error:
                if error.response['Error']['Code'] == 'DBSubnetGroupNotFound':
                    self.warn("RDS db subnet group {} not found, performing destroy to sync the state ...".format(self._state['groupName']))
                    self._destroy()
                    return
                else:
                    raise error
            
            subnetIds = []
            for subnetGroup in response['DBSubnetGroups']:
                subnetIds.extend((subnet['SubnetIdentifier'] for subnet in subnetGroup['Subnets']))

            with self.depl._db:
                self._state['subnetIds'] = subnetIds

    def realize_create_subnet(self, allow_recreate):
        config = self.get_defn()
        if self.state == self.UP:
            if not allow_recreate:
                raise Exception(
                    "RDS subnet group {} definition changed and it needs to be recreated"
                    " use --allow-recreate if you want to create a new one"
                    .format(self._state['groupName']))

            self.warn("RDS subnet group definition changed, recreating ...")
            self._destroy()
            self.reset_client() # FIXME: ideally this should be detected automatically

        self.log("creating RDS subnet group {}".format(config['groupName']))
        self._state['region'] = config['region']
        self.get_client("rds").create_db_subnet_group(
            DBSubnetGroupName=config['groupName'],
            DBSubnetGroupDescription=config['description'],
            SubnetIds=config['subnetIds'],
            Tags=[{ 'Key': 'Generator', 'Value': 'Automatically generated by NixOps'}]) # FIXME: is it a good practice? shouldn't this go into the Nix definition file and be propagated through defaults here?
        with self.depl._db:
            self.state = self.UP
            self._state['groupName'] = config['groupName']
            self._state['description'] = config['description']
            self._state['subnetIds'] = config['subnetIds']

    def _destroy(self):
        if self.state != self.UP:
            return
        self.log("destroying rds db subnet group {}".format(self._state['groupName']))
        try:
            self.get_client("rds").delete_db_subnet_group(self._state['groupName'])
        except botocore.exceptions.ClientError as error:
            if error.response['Error']['Code'] == 'DBSubnetGroupNotFound':
                self.warn("rds subnet group {} already deleted".format(self._state['groupName']))
            else:
                raise error

        with self.depl._db:
            self.state = self.MISSING
            self._state['groupName'] = None
            self._state['region'] = None
            self._state['description'] = None
            self._state['rules'] = None

    def destroy(self, wipe=True):
        self._destroy()
        return True
